/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Run;

import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;

/**
 *
 * @author Ricardo Faria
 */
public class dbimgblob extends javax.swing.JFrame {

    Carregar carregar = new Carregar();
    Connection conn;
    PreparedStatement stmt;
    ResultSet resultSet;
    File image;
    FileOutputStream fos;
    FileInputStream inStream;
    BufferedImage originalImage, resizeImage;
    
    java.sql.Blob blob;

    int total = 0;
    int processo = 0;
    Boolean flag = false;

    String[] jdbcArray = {"mysql://", "sqlserver://", "postgresql://", "oracle:thin:@", "sqlite"};
    String[] driverArray = {"com.mysql.jdbc.Driver", "com.microsoft.sqlserver.jdbc.SQLServerDriver", "org.postgresql.Driver", "oracle.jdbc.OracleDriver", "org.sqlite.JDBC"};
    String[] bancoArray = {"/", ";database=", "/", ":", ":"};
    String[] tamanhoArray = {"102400", "512000", "1048576", "10485760", "104857600"};

    private static BufferedImage resizeImage(BufferedImage originalImage, int WIDTH, int HEIGHT, int type) {
        int IMG_WIDTH = WIDTH;
        int IMG_HEIGHT = HEIGHT;

        if (originalImage.getHeight() > originalImage.getWidth()) {
            IMG_WIDTH = HEIGHT;
            IMG_HEIGHT = WIDTH;
        }

        BufferedImage resizedImage = new BufferedImage(IMG_WIDTH, IMG_HEIGHT, BufferedImage.TYPE_INT_RGB);
        Graphics2D g = resizedImage.createGraphics();
        g.drawImage(originalImage, 0, 0, IMG_WIDTH, IMG_HEIGHT, null);
        g.dispose();

        return resizedImage;
    }

    private int count(String servidor, String usuario, String senha, String tabela, String imagem) throws SQLException {
        int count = 0;
        conn = DriverManager.getConnection(servidor, usuario, senha);
        stmt = conn.prepareStatement("SELECT COUNT(*) FROM " + tabela + " WHERE " + imagem + " IS NOT NULL");
        resultSet = stmt.executeQuery();
        while (resultSet.next()) {
            count = resultSet.getInt(1);
        }
        return count;
    }

    /**
     * Creates new form dbimgblob
     */
    public dbimgblob() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel12 = new javax.swing.JLabel();
        jFileChooser1 = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        btnInciar = new javax.swing.JButton();
        btnSair = new javax.swing.JButton();
        btnSobre = new javax.swing.JButton();
        img = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        Tema = new javax.swing.JLabel();
        Servidor = new javax.swing.JLabel();
        txtServidor = new javax.swing.JTextField();
        Driver = new javax.swing.JLabel();
        txtDriver = new javax.swing.JComboBox<>();
        Banco = new javax.swing.JLabel();
        txtBD = new javax.swing.JTextField();
        Porta = new javax.swing.JLabel();
        txtPorta = new javax.swing.JTextField();
        Usuario = new javax.swing.JLabel();
        txtUsuario = new javax.swing.JTextField();
        Senha = new javax.swing.JLabel();
        txtSenha = new javax.swing.JPasswordField();
        Tabela = new javax.swing.JLabel();
        txtTabela = new javax.swing.JTextField();
        ID = new javax.swing.JLabel();
        txtColunaID = new javax.swing.JTextField();
        Imagem = new javax.swing.JLabel();
        txtColuna = new javax.swing.JTextField();
        Caminho = new javax.swing.JLabel();
        txtCaminho = new javax.swing.JTextField();
        Altura = new javax.swing.JLabel();
        txtAltura = new javax.swing.JTextField();
        Comprimento = new javax.swing.JLabel();
        txtComprimento = new javax.swing.JTextField();
        Tamanho = new javax.swing.JLabel();
        txtTamanho = new javax.swing.JComboBox<>();
        Formato = new javax.swing.JLabel();
        txtFormato = new javax.swing.JComboBox<>();
        txtAguarde = new javax.swing.JLabel();
        jProgressBar = new javax.swing.JProgressBar();
        btnTestar = new javax.swing.JButton();

        jLabel12.setText("jLabel12");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("DbBlobTool");
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));

        btnInciar.setText("Iniciar");
        btnInciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInciarActionPerformed(evt);
            }
        });

        btnSair.setText("Sair");
        btnSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSairActionPerformed(evt);
            }
        });

        btnSobre.setText("Sobre");
        btnSobre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSobreActionPerformed(evt);
            }
        });

        img.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        img.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/db.PNG"))); // NOI18N

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("dbBlobTool");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSair, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnInciar, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                    .addComponent(btnSobre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(img, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnInciar)
                .addGap(18, 18, 18)
                .addComponent(btnSobre)
                .addGap(18, 18, 18)
                .addComponent(btnSair)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(img, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 49, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));
        jPanel2.setForeground(new java.awt.Color(204, 204, 204));

        Tema.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        Tema.setForeground(new java.awt.Color(51, 51, 255));
        Tema.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Tema.setText("Otimização de imagens binárias armazenadas em bando de dados");
        Tema.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        Servidor.setForeground(new java.awt.Color(0, 0, 0));
        Servidor.setText("Servidor");

        txtServidor.setText("localhost");
        txtServidor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtServidorActionPerformed(evt);
            }
        });

        Driver.setForeground(new java.awt.Color(0, 0, 0));
        Driver.setText("Driver");

        txtDriver.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "MySQL", "SQL Server", "PostgreSQL", "Oracle", "SQLite" }));
        txtDriver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDriverActionPerformed(evt);
            }
        });

        Banco.setForeground(new java.awt.Color(0, 0, 0));
        Banco.setText("Banco de Dados");

        txtBD.setText("XE");
        txtBD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBDActionPerformed(evt);
            }
        });

        Porta.setForeground(new java.awt.Color(0, 0, 0));
        Porta.setText("Porta");

        txtPorta.setText("1521");

        Usuario.setForeground(new java.awt.Color(0, 0, 0));
        Usuario.setText("Usuário");

        txtUsuario.setText("system");
        txtUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUsuarioActionPerformed(evt);
            }
        });

        Senha.setForeground(new java.awt.Color(0, 0, 0));
        Senha.setText("Senha");

        txtSenha.setText("string00");
        txtSenha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSenhaActionPerformed(evt);
            }
        });

        Tabela.setForeground(new java.awt.Color(0, 0, 0));
        Tabela.setText("Tabela");

        txtTabela.setText("imgdemo");

        ID.setForeground(new java.awt.Color(0, 0, 0));
        ID.setText("Coluna ID:");

        txtColunaID.setText("id");
        txtColunaID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtColunaIDActionPerformed(evt);
            }
        });

        Imagem.setForeground(new java.awt.Color(0, 0, 0));
        Imagem.setText("Coluna Imagem:");

        txtColuna.setText("data");
        txtColuna.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtColunaActionPerformed(evt);
            }
        });

        Caminho.setForeground(new java.awt.Color(0, 0, 0));
        Caminho.setText("Caminho Distino");

        txtCaminho.setText("C:\\Test");

        Altura.setForeground(new java.awt.Color(0, 0, 0));
        Altura.setText("Altura");

        txtAltura.setText("640");
        txtAltura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAlturaActionPerformed(evt);
            }
        });

        Comprimento.setForeground(new java.awt.Color(0, 0, 0));
        Comprimento.setText("Comprimento");

        txtComprimento.setText("480");

        Tamanho.setForeground(new java.awt.Color(0, 0, 0));
        Tamanho.setText("Tamanho");

        txtTamanho.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "100KB", "500KB", "1MB", "10MB", "100MB" }));
        txtTamanho.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTamanhoActionPerformed(evt);
            }
        });

        Formato.setForeground(new java.awt.Color(0, 0, 0));
        Formato.setText("Formato");

        txtFormato.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "JPG", "GIF", "PNG", "BMP" }));

        txtAguarde.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtAguarde.setForeground(new java.awt.Color(0, 0, 0));
        txtAguarde.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        btnTestar.setText("Testar");
        btnTestar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTestarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Tema, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtAguarde, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(Altura)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtAltura, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Comprimento)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtComprimento, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Formato)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFormato, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Tamanho)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtTamanho, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnTestar))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                            .addComponent(Senha)
                                            .addGap(68, 68, 68))
                                        .addComponent(Banco)
                                        .addComponent(Usuario)
                                        .addComponent(Servidor))
                                    .addComponent(ID))
                                .addGap(6, 6, 6)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtBD, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtServidor, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(Porta)
                                            .addComponent(Driver)
                                            .addComponent(Tabela))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(txtColuna, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtDriver, 0, 161, Short.MAX_VALUE)
                                            .addComponent(txtTabela)
                                            .addComponent(txtPorta)))
                                    .addComponent(txtSenha, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(Caminho)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(txtColunaID, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(Imagem))
                                    .addComponent(txtCaminho, javax.swing.GroupLayout.PREFERRED_SIZE, 423, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Tema)
                .addGap(8, 8, 8)
                .addComponent(btnTestar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Servidor)
                    .addComponent(txtServidor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Driver)
                    .addComponent(txtDriver, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Banco)
                    .addComponent(txtBD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Porta)
                    .addComponent(txtPorta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Usuario)
                    .addComponent(txtUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTabela, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Tabela))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Senha)
                    .addComponent(txtSenha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtColuna, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Imagem)
                    .addComponent(txtColunaID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ID))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Caminho)
                    .addComponent(txtCaminho, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Altura)
                    .addComponent(txtAltura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtComprimento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Comprimento)
                    .addComponent(Formato)
                    .addComponent(txtFormato, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Tamanho)
                    .addComponent(txtTamanho, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtAguarde)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addComponent(jProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtServidorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtServidorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtServidorActionPerformed

    private void txtUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUsuarioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUsuarioActionPerformed

    private void btnSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSairActionPerformed
        setVisible(false);
        dispose();
        System.exit(0);
    }//GEN-LAST:event_btnSairActionPerformed

    private void btnInciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInciarActionPerformed
        btnInciar.setText("Aguarde");
        txtAguarde.setText("O processo de otimização foi iniciado. Aguarde um instante...");
        btnInciar.setEnabled(false);
        flag = true;
        carregar.start();

    }//GEN-LAST:event_btnInciarActionPerformed

    private void txtSenhaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSenhaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSenhaActionPerformed

    private void txtTamanhoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTamanhoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTamanhoActionPerformed

    private void txtDriverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDriverActionPerformed

        int driver = txtDriver.getSelectedIndex();

        if (driver == 3) {

            Servidor.setEnabled(true);
            txtServidor.setEnabled(true);
            Banco.setText("SID");
            Banco.setEnabled(true);
            txtBD.setEnabled(true);
            Porta.setEnabled(true);
            txtPorta.setEnabled(true);
            Usuario.setEnabled(true);
            txtUsuario.setEnabled(true);
            Senha.setEnabled(true);
            txtSenha.setEnabled(true);

        } else if (driver == 4) {
            Servidor.setEnabled(false);
            txtServidor.setEnabled(false);
            txtServidor.setText("");

            Banco.setText("Banco de Dados");
            Banco.setEnabled(true);
            txtBD.setEnabled(true);
            txtBD.setText("");

            Porta.setEnabled(false);
            txtPorta.setEnabled(false);
            txtPorta.setText("");

            Usuario.setEnabled(false);
            txtUsuario.setEnabled(false);
            txtUsuario.setText("");

            Senha.setEnabled(false);
            txtSenha.setEnabled(false);
            txtSenha.setText("");
        } else {
            Servidor.setEnabled(true);
            txtServidor.setEnabled(true);
            Banco.setText("Banco de Dados");
            Banco.setEnabled(true);
            txtBD.setEnabled(true);
            Porta.setEnabled(true);
            txtPorta.setEnabled(true);
            Usuario.setEnabled(true);
            txtUsuario.setEnabled(true);
            Senha.setEnabled(true);
            txtSenha.setEnabled(true);

        }


    }//GEN-LAST:event_txtDriverActionPerformed

    private void btnSobreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSobreActionPerformed
        JOptionPane.showMessageDialog(null, "Desenvolvido por Ricardo Junior");
    }//GEN-LAST:event_btnSobreActionPerformed

    private void btnTestarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTestarActionPerformed
        int driver = txtDriver.getSelectedIndex();
        String servidor = txtServidor.getText();
        String porta = txtPorta.getText();
        String banco = txtBD.getText();
        String usuario = txtUsuario.getText();
        String senha = txtSenha.getText();
        String dbPasta = banco.replaceAll("\\\\", "\\\\\\\\");

        try {
            Class.forName(driverArray[driver]);
            if (driver == 3) { // Oracle
                conn = DriverManager.getConnection("jdbc:" + jdbcArray[driver] + servidor + ":" + porta + bancoArray[driver] + banco, usuario, senha);
            } else if (driver == 4) { //SQLite
                conn = DriverManager.getConnection("jdbc:" + jdbcArray[driver] + bancoArray[driver] + dbPasta);
            } else { // ALL
                conn = DriverManager.getConnection("jdbc:" + jdbcArray[driver] + servidor + ":" + porta + bancoArray[driver] + banco, usuario, senha);
            }

            //Testa sua conexão//  
            if (conn != null) {
                JOptionPane.showMessageDialog(null, "Conectado com sucesso!");
                conn.close();
            }

        } catch (SQLException ex) {
            Logger.getLogger(dbimgblob.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Não foi possivel realizar conexão");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(dbimgblob.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "O driver expecificado não foi encontrado.");
        }

    }//GEN-LAST:event_btnTestarActionPerformed

    private void txtAlturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAlturaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAlturaActionPerformed

    private void txtColunaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtColunaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtColunaActionPerformed

    private void txtBDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBDActionPerformed

    private void txtColunaIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtColunaIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtColunaIDActionPerformed

    public class Carregar extends Thread {

        public Carregar() {
        }

        @Override
        public void run() {

            while (!interrupted()) {

                if (flag == true) {
                    try {

                        jProgressBar.setValue(0);
                        jProgressBar.setStringPainted(true);

                        String servidor = txtServidor.getText();
                        String porta = txtPorta.getText();
                        String banco = txtBD.getText();
                        String tabela = txtTabela.getText();
                        String colunaId = txtColunaID.getText();
                        String colunaImagem = txtColuna.getText();
                        String usuario = txtUsuario.getText();
                        String senha = txtSenha.getText();
                        String caminho = txtCaminho.getText();
                        String altura = txtAltura.getText();
                        String comprimento = txtComprimento.getText();

                        String pasta = caminho.replaceAll("\\\\", "\\\\\\\\");

                        String db = banco.replaceAll("\\\\", "\\\\\\\\");

                        int driver = txtDriver.getSelectedIndex();
                        int tamanho = txtTamanho.getSelectedIndex();

                        String valor = tamanhoArray[tamanho];

                        String sel = (String) txtDriver.getSelectedItem();
                        String formato = (String) txtFormato.getSelectedItem();

                        Class.forName(driverArray[driver]);

                        try {

                            if (driver == 3) {
                                
                                String urlServer = "jdbc:" + jdbcArray[driver] + servidor + ":" + porta + bancoArray[driver] + banco;
                                total = count(urlServer, usuario, senha, tabela, colunaImagem);
                            } else if (driver == 4) {
                                String urlServer = "jdbc:" + jdbcArray[driver] + bancoArray[driver] + db;
                                total = count(urlServer, usuario, senha, tabela, colunaImagem);
                            } else {
                                String urlServer = "jdbc:" + jdbcArray[driver] + servidor + ":" + porta + bancoArray[driver] + banco;
                                total = count(urlServer, usuario, senha, tabela, colunaImagem);
                            }

                        } catch (Exception e) {
                        }
                        jProgressBar.setValue(0);
                        jProgressBar.setStringPainted(true);

                        switch (sel) {
                            case "MySQL":

                                stmt = conn.prepareStatement("SELECT " + colunaId + ", " + colunaImagem + " FROM " + tabela + " WHERE " + colunaImagem + " IS NOT NULL");
                                resultSet = stmt.executeQuery();

                                jProgressBar.setMaximum(total);

                                while (resultSet.next()) {

                                    processo = jProgressBar.getValue() + 1;
                                    jProgressBar.setValue(processo);

                                    String id = resultSet.getString(1);
                                    blob = resultSet.getBlob(2);
                                    image = new File(pasta + "\\" + id + "." + formato);
                                    fos = new FileOutputStream(image);

                                    byte[] buffer = new byte[1024];
                                    InputStream is = resultSet.getBinaryStream(2);
                                    while (is.read(buffer) > 0) {
                                        fos.write(buffer);
                                    }
                                    fos.close();

                                    try {
                                        long fileSizeInBytes = image.length();
                                        long fileSizeInKB = fileSizeInBytes;
                                        long fileSizeInMB = fileSizeInKB;

                                        if (fileSizeInMB >= Integer.parseInt(valor)) { // tamanho usando a definição 1MB

                                            originalImage = ImageIO.read(new File(pasta + "\\" + id + "." + formato));
                                            int type = originalImage.getType() == 10485760 ? BufferedImage.TYPE_INT_ARGB : originalImage.getType();

                                            resizeImage = resizeImage(originalImage, Integer.valueOf(altura), Integer.valueOf(comprimento), type);
                                            ImageIO.write(resizeImage, formato, new File(pasta + "\\" + id + "_" + formato + "." + formato));

//                                            FileInputStream inStream = new FileInputStream(new File(pasta + "\\" + id + "_" + formato + "." + formato));
//                                            String sqlUPDATE = "UPDATE " + tabela + " SET " + colunaImagem + " = ? WHERE ID = " + id;
//                                            PreparedStatement stmtUPDATE = conn.prepareStatement(sqlUPDATE);
//                                            stmtUPDATE.setBinaryStream(1, inStream);
//                                            stmtUPDATE.executeUpdate();
//                                            inStream.close();
                                        }
                                    } catch (IOException e) {
                                        System.out.println(e.getMessage());
                                    }
                                }
                                conn.close();

                                btnInciar.setText("Iniciar");
                                txtAguarde.setText("Finalizar");
                                btnInciar.setEnabled(true);
                                JOptionPane.showMessageDialog(null, "Processo concluído com sucesso.");
                                break;

                            case "SQL Server":

                                stmt = conn.prepareStatement("SELECT " + colunaId + ", " + colunaImagem + " FROM " + tabela + " (NOLOCK) WHERE " + colunaImagem + " IS NOT NULL");
                                resultSet = stmt.executeQuery();

                                jProgressBar.setMaximum(total);

                                while (resultSet.next()) {

                                    processo = jProgressBar.getValue() + 1;
                                    jProgressBar.setValue(processo);

                                    String id = resultSet.getString(1);
                                    blob = resultSet.getBlob(2);
                                    image = new File(pasta + "\\" + id + "." + formato);
                                    fos = new FileOutputStream(image);

                                    byte[] buffer = new byte[1024];
                                    InputStream is = resultSet.getBinaryStream(2);
                                    while (is.read(buffer) > 0) {
                                        fos.write(buffer);
                                    }
                                    fos.close();

                                    try {
                                        long fileSizeInBytes = image.length();
                                        long fileSizeInKB = fileSizeInBytes;
                                        long fileSizeInMB = fileSizeInKB;

                                        if (fileSizeInMB >= Integer.parseInt(valor)) { // tamanho usando a definição 1MB

                                            originalImage = ImageIO.read(new File(pasta + "\\" + id + "." + formato));
                                            int type = originalImage.getType() == 10485760 ? BufferedImage.TYPE_INT_ARGB : originalImage.getType();

                                            resizeImage = resizeImage(originalImage, Integer.valueOf(altura), Integer.valueOf(comprimento), type);
                                            ImageIO.write(resizeImage, formato, new File(pasta + "\\" + id + "_" + formato + "." + formato));

                                            FileInputStream inStream = new FileInputStream(new File(pasta + "\\" + id + "_" + formato + "." + formato));
                                            String sqlUPDATE = "UPDATE " + tabela + " SET " + colunaImagem + " = ? WHERE ID = " + id;
                                            PreparedStatement stmtUPDATE = conn.prepareStatement(sqlUPDATE);
                                            stmtUPDATE.setBinaryStream(1, inStream);
                                            stmtUPDATE.executeUpdate();
                                            inStream.close();
                                        }
                                    } catch (IOException e) {
                                        System.out.println(e.getMessage());
                                    }
                                }
                                conn.close();
                                btnInciar.setText("Iniciar");
                                txtAguarde.setText("Finalizar");
                                btnInciar.setEnabled(true);
                                JOptionPane.showMessageDialog(null, "Processo concluído com sucesso.");
                                break;

                            case "PostgreSQL":

                                stmt = conn.prepareStatement("SELECT " + colunaId + ", " + colunaImagem + " FROM " + tabela + " WHERE " + colunaImagem + " IS NOT NULL");
                                resultSet = stmt.executeQuery();

                                jProgressBar.setMaximum(total);

                                while (resultSet.next()) {

                                    processo = jProgressBar.getValue() + 1;
                                    jProgressBar.setValue(processo);

                                    String id = resultSet.getString(1);
                                    blob = resultSet.getBlob(2);
                                    image = new File(pasta + "\\" + id + "." + formato);
                                    fos = new FileOutputStream(image);

                                    byte[] buffer = new byte[1024];
                                    InputStream is = resultSet.getBinaryStream(2);
                                    while (is.read(buffer) > 0) {
                                        fos.write(buffer);
                                    }
                                    fos.close();

                                    try {
                                        long fileSizeInBytes = image.length();
                                        long fileSizeInKB = fileSizeInBytes;
                                        long fileSizeInMB = fileSizeInKB;

                                        if (fileSizeInMB >= Integer.parseInt(valor)) { // tamanho usando a definição 1MB

                                            originalImage = ImageIO.read(new File(pasta + "\\" + id + "." + formato));
                                            int type = originalImage.getType() == 10485760 ? BufferedImage.TYPE_INT_ARGB : originalImage.getType();

                                            resizeImage = resizeImage(originalImage, Integer.valueOf(altura), Integer.valueOf(comprimento), type);
                                            ImageIO.write(resizeImage, formato, new File(pasta + "\\" + id + "_" + formato + "." + formato));

                                            FileInputStream inStream = new FileInputStream(new File(pasta + "\\" + id + "_" + formato + "." + formato));
                                            String sqlUPDATE = "UPDATE " + tabela + " SET " + colunaImagem + " = ? WHERE ID = " + id;
                                            PreparedStatement stmtUPDATE = conn.prepareStatement(sqlUPDATE);
                                            stmtUPDATE.setBinaryStream(1, inStream);
                                            stmtUPDATE.executeUpdate();
                                            inStream.close();
                                        }
                                    } catch (IOException e) {
                                        System.out.println(e.getMessage());
                                    }
                                }
                                conn.close();
                                btnInciar.setText("Iniciar");
                                txtAguarde.setText("Finalizar");
                                btnInciar.setEnabled(true);
                                JOptionPane.showMessageDialog(null, "Processo concluído com sucesso.");
                                break;
                            case "Oracle":
                                stmt = conn.prepareStatement("SELECT " + colunaId + ", " + colunaImagem + " FROM " + tabela + " WHERE " + colunaImagem + " IS NOT NULL");
                                resultSet = stmt.executeQuery();

                                jProgressBar.setMaximum(total);

                                while (resultSet.next()) {

                                    processo = jProgressBar.getValue() + 1;
                                    jProgressBar.setValue(processo);

                                    String id = resultSet.getString(1);
                                    blob = resultSet.getBlob(2);
                                    image = new File(pasta + "\\" + id + "." + formato);
                                    fos = new FileOutputStream(image);

                                    byte[] buffer = new byte[1024];
                                    InputStream is = resultSet.getBinaryStream(2);
                                    while (is.read(buffer) > 0) {
                                        fos.write(buffer);
                                    }
                                    fos.close();

                                    try {
                                        long fileSizeInBytes = image.length();
                                        long fileSizeInKB = fileSizeInBytes;
                                        long fileSizeInMB = fileSizeInKB;

                                        if (fileSizeInMB >= Integer.parseInt(valor)) { // tamanho usando a definição 1MB

                                            originalImage = ImageIO.read(new File(pasta + "\\" + id + "." + formato));
                                            int type = originalImage.getType() == 10485760 ? BufferedImage.TYPE_INT_ARGB : originalImage.getType();

                                            resizeImage = resizeImage(originalImage, Integer.valueOf(altura), Integer.valueOf(comprimento), type);
                                            ImageIO.write(resizeImage, formato, new File(pasta + "\\" + id + "_" + formato + "." + formato));

                                            FileInputStream inStream = new FileInputStream(new File(pasta + "\\" + id + "_" + formato + "." + formato));
                                            String sqlUPDATE = "UPDATE " + tabela + " SET " + colunaImagem + " = ? WHERE ID = " + id;
                                            PreparedStatement stmtUPDATE = conn.prepareStatement(sqlUPDATE);
                                            stmtUPDATE.setBinaryStream(1, inStream);
                                            stmtUPDATE.executeUpdate();
                                            inStream.close();
                                        }
                                    } catch (IOException e) {
                                        System.out.println(e.getMessage());
                                    }
                                }
                                conn.close();
                                btnInciar.setText("Iniciar");
                                txtAguarde.setText("Finalizar");
                                btnInciar.setEnabled(true);
                                JOptionPane.showMessageDialog(null, "Processo concluído com sucesso.");
                                break;
                            case "SQLite":

                                stmt = conn.prepareStatement("SELECT " + colunaId + ", " + colunaImagem + " FROM " + tabela + " WHERE " + colunaImagem + " IS NOT NULL");
                                resultSet = stmt.executeQuery();

                                jProgressBar.setMaximum(total);

                                while (resultSet.next()) {

                                    processo = jProgressBar.getValue() + 1;
                                    jProgressBar.setValue(processo);

                                    String id = resultSet.getString(1);
                                    blob = resultSet.getBlob(2);
                                    image = new File(pasta + "\\" + id + "." + formato);
                                    fos = new FileOutputStream(image);

                                    byte[] buffer = new byte[1024];
                                    InputStream is = resultSet.getBinaryStream(2);
                                    while (is.read(buffer) > 0) {
                                        fos.write(buffer);
                                    }
                                    fos.close();

                                    try {
                                        long fileSizeInBytes = image.length();
                                        long fileSizeInKB = fileSizeInBytes;
                                        long fileSizeInMB = fileSizeInKB;

                                        if (fileSizeInMB >= Integer.parseInt(valor)) { // tamanho usando a definição 1MB

                                            originalImage = ImageIO.read(new File(pasta + "\\" + id + "." + formato));
                                            int type = originalImage.getType() == 10485760 ? BufferedImage.TYPE_INT_ARGB : originalImage.getType();

                                            resizeImage = resizeImage(originalImage, Integer.valueOf(altura), Integer.valueOf(comprimento), type);
                                            ImageIO.write(resizeImage, formato, new File(pasta + "\\" + id + "_" + formato + "." + formato));

                                            FileInputStream inStream = new FileInputStream(new File(pasta + "\\" + id + "_" + formato + "." + formato));
                                            String sqlUPDATE = "UPDATE " + tabela + " SET " + colunaImagem + " = ? WHERE ID = " + id;
                                            PreparedStatement stmtUPDATE = conn.prepareStatement(sqlUPDATE);
                                            stmtUPDATE.setBinaryStream(1, inStream);
                                            stmtUPDATE.executeUpdate();
                                            inStream.close();
                                        }
                                    } catch (IOException e) {
                                        System.out.println(e.getMessage());
                                    }
                                }
                                conn.close();

                                btnInciar.setText("Iniciar");
                                txtAguarde.setText("Finalizar");
                                btnInciar.setEnabled(true);
                                JOptionPane.showMessageDialog(null, "Processo concluído com sucesso.");
                                break;

                            default:
                                JOptionPane.showMessageDialog(null, "Obtendo drivers JDBC para um banco de dados");
                        }
                    } catch (SQLException | ClassNotFoundException | IOException ex) {
                        Logger.getLogger(dbimgblob.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    flag = false;

                }
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(dbimgblob.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new dbimgblob().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Altura;
    private javax.swing.JLabel Banco;
    private javax.swing.JLabel Caminho;
    private javax.swing.JLabel Comprimento;
    private javax.swing.JLabel Driver;
    private javax.swing.JLabel Formato;
    private javax.swing.JLabel ID;
    private javax.swing.JLabel Imagem;
    private javax.swing.JLabel Porta;
    private javax.swing.JLabel Senha;
    private javax.swing.JLabel Servidor;
    private javax.swing.JLabel Tabela;
    private javax.swing.JLabel Tamanho;
    private javax.swing.JLabel Tema;
    private javax.swing.JLabel Usuario;
    private javax.swing.JButton btnInciar;
    private javax.swing.JButton btnSair;
    private javax.swing.JButton btnSobre;
    private javax.swing.JButton btnTestar;
    private javax.swing.JLabel img;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JProgressBar jProgressBar;
    private javax.swing.JLabel txtAguarde;
    private javax.swing.JTextField txtAltura;
    private javax.swing.JTextField txtBD;
    private javax.swing.JTextField txtCaminho;
    private javax.swing.JTextField txtColuna;
    private javax.swing.JTextField txtColunaID;
    private javax.swing.JTextField txtComprimento;
    private javax.swing.JComboBox<String> txtDriver;
    private javax.swing.JComboBox<String> txtFormato;
    private javax.swing.JTextField txtPorta;
    private javax.swing.JPasswordField txtSenha;
    private javax.swing.JTextField txtServidor;
    private javax.swing.JTextField txtTabela;
    private javax.swing.JComboBox<String> txtTamanho;
    private javax.swing.JTextField txtUsuario;
    // End of variables declaration//GEN-END:variables
}
